import pygame
import sys
import random
import math
from tkinter import messagebox, Tk

size = (width, height) = 600,600

pygame.init()

window = pygame.display.set_mode(size)
pygame.display.set_caption("Pathfinding Algorithm by Donald Dang")
clk = pygame.time.Clock()

cols = 50
rows = 50

grid = []
openSet = []
closeSet = []
path = []

w = width//cols
h = height//rows

class Spot:
    def __init__(self, i, j):
        self.x = i
        self.y = j
        self.f = 0
        self.g = 0
        self.h = 0
        self.neighbours = []
        self.prev = None
        self.wall = False

    def show(self,win,col):
        if self.wall == True:
            col = (0,0,0)
        pygame.draw.rect(win,col,(self.x*w,self.y*h,w-1,h-1))

    def add_neighbours(self,grid):
        if self.x<cols-1:
            self.neighbours.append(grid[self.x+1][self.y])
        if self.x>0:
            self.neighbours.append(grid[self.x-1][self.y])
        if self.y <rows-1:
            self.neighbours.append(grid[self.x][self.y+1])
        if self.y>0:
            self.neighbours.append(grid[self.x][self.y-1])
        if self.x<cols-1 and self.y<rows-1:
            self.neighbours.append(grid[self.x+1][self.y+1])
        if self.x<cols-1 and self.y>0:
            self.neighbours.append(grid[self.x+1][self.y-1])
        if self.x>0 and self.y<rows-1:
            self.neighbours.append(grid[self.x-1][self.y+1])
        if self.x>0 and self.y>0:
            self.neighbours.append(grid[self.x-1][self.y-1])

def clickWall(pos,state):
    i=pos[0]//w
    j=pos[1]//h
    grid[i][j].wall = state

def place(pos):
    i=pos[0]//w
    j=pos[1]//h
    return w,h

def heuristics(a,b):
    return math.sqrt((a.x-b.x)**2+abs(a.y-b.y)**2)

for i in range(cols):
    array = []
    for j in range(rows):
        array.append(Spot(i,j))
    grid.append(array)

for i in range(cols):
    for j in range(rows):
        grid[i][j].add_neighbours(grid)

start = grid[0][0]
end = grid[cols-cols//2][rows-cols//4]

openSet.append(start)

def close():
    pygame.quit()
    sys.exit()


def main():
    flag = False
    noflag = True
    startflag = False

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                close()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button in (1,3):
                    clickWall(pygame.mouse.get_pos(),False)
            if event.type == pygame.MOUSEMOTION:
                if event.buttons[0] or event.buttons[2]:
                    clickWall(pygame.mouse.get_pos(),event.buttons[0])
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    startflag = True

        if startflag:
            if len(openSet)>0:
                winner = 0
                for i in range(len(openSet)):
                    if openSet[i].f<openSet[winner].f:
                               winner = i
                current = openSet[winner]

                if current == end:
                    temp = current
                    while temp.prev:
                        path.append(temp.prev)
                        temp = temp.prev

                    if not flag:
                        flag = True
                        print("All Done!")
                    elif flag:
                        continue

                if flag == False:
                    openSet.remove(current)
                    closeSet.append(current)

                    for neighbour in current.neighbours:
                        if neighbour in closeSet or neighbour.wall:
                            continue
                        tempG = current.g+1

                        newPath = False
                        if neighbour in openSet:
                            if tempG<neighbour.g:
                                neighbour.g=tempG
                                newPath = True
                        else:
                            neighbour.g = tempG
                            newPath = True
                            openSet.append(neighbour)

                        if newPath:
                            neighbour.h = heuristics(neighbour, end)
                            neighbour.f = neighbour.g + neighbour.h
                            neighbour.prev = current

            else:
                if noflag:
                    Tk().wm_withdraw()
                    messagebox.showinfo("No Solution", "There was no solution")
                    noflag = False
        
        window.fill((0,20,20))
        for i in range(cols):
            for j in range(rows):
                spot = grid[j][i]
                spot.show(window, (255,255,255))
                if flag and spot in path:
                    spot.show(window, (25,120,250))
                elif spot in closeSet:
                    spot.show(window, (255,0,0))
                elif spot in openSet:
                    spot.show(window,(0,255,0))
                try:
                    if spot == end:
                        spot.show(window,(0,120,255))
                except Exception:
                    pass

        pygame.display.flip()


main()
